{"version":3,"sources":["../src/Sharding/ShardingManager.ts"],"names":[],"mappings":"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","file":"ShardingManager.js","sourcesContent":["import { CloseEvent } from '../Cluster/BaseCluster';\r\nimport { Client, ClientOptions } from 'discord.js';\r\nimport { MasterIPC } from '../IPC/MasterIPC';\r\nimport { Cluster } from '../Cluster/Cluster';\r\nimport { http } from '../Util/Constants';\r\nimport { EventEmitter } from 'events';\r\nimport { cpus, platform } from 'os';\r\nimport { isMaster } from 'cluster';\r\nimport * as Util from '../Util/Util';\r\nimport fetch from 'node-fetch';\r\n\r\nexport interface SharderOptions {\r\n\ttoken?: string;\r\n\tshardCount?: number | 'auto';\r\n\tclusterCount?: number;\r\n\tname?: string;\r\n\tdevelopment?: boolean;\r\n\tclient?: typeof Client;\r\n\tclientOptions?: ClientOptions;\r\n\tguildsPerShard?: number;\r\n\trespawn?: boolean;\r\n\tipcSocket?: string | number;\r\n\ttimeout?: number;\r\n}\r\n\r\nexport interface SessionObject {\r\n\turl: string;\r\n\tshards: number;\r\n\tsession_start_limit: {\r\n\t\ttotal: number;\r\n\t\tremaining: number;\r\n\t\treset_after: number;\r\n\t};\r\n}\r\n\r\nexport class ShardingManager extends EventEmitter {\r\n\tpublic clusters = new Map<number, Cluster>();\r\n\tpublic clientOptions: ClientOptions;\r\n\tpublic shardCount: number | 'auto';\r\n\tpublic guildsPerShard: number;\r\n\tpublic client: typeof Client;\r\n\tpublic clusterCount: number;\r\n\tpublic ipcSocket: string | number;\r\n\tpublic respawn: boolean;\r\n\tpublic timeout: number;\r\n\tpublic ipc: MasterIPC;\r\n\r\n\tprivate development: boolean;\r\n\tprivate token?: string;\r\n\r\n\tconstructor(public path: string, options: SharderOptions) {\r\n\t\tsuper();\r\n\t\tthis.clusterCount = options.clusterCount || cpus().length;\r\n\t\tthis.guildsPerShard = options.guildsPerShard || 1000;\r\n\t\tthis.clientOptions = options.clientOptions || {};\r\n\t\tthis.development = options.development || false;\r\n\t\tthis.shardCount = options.shardCount || 'auto';\r\n\t\tthis.client = options.client || Client;\r\n\t\tthis.respawn = options.respawn || true;\r\n\t\tthis.ipcSocket = options.ipcSocket || 9999;\r\n\t\tthis.token = options.token;\r\n\t\tthis.timeout = options.timeout || 30000;\r\n\t\tthis.ipc = new MasterIPC(this);\r\n\r\n\t\tthis.ipc.on('debug', msg => this.emit('debug', `[IPC] ${msg}`));\r\n\t\tthis.ipc.on('error', err => this.emit('error', err));\r\n\r\n\t\tif (!this.path) throw new Error('You need to supply a Path!');\r\n\t}\r\n\r\n\tpublic async spawn(): Promise<void> {\r\n\t\tif (isMaster) {\r\n\t\t\tif (this.shardCount === 'auto') {\r\n\t\t\t\tthis.emit('debug', 'Fetching Session Endpoint');\r\n\t\t\t\tconst { shards: recommendShards } = await this._fetchSessionEndpoint();\r\n\r\n\t\t\t\tthis.shardCount = Util.calcShards(recommendShards, this.guildsPerShard);\r\n\t\t\t\tthis.emit('debug', `Using recommend shard count of ${this.shardCount} shards with ${this.guildsPerShard} guilds per shard`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.emit('debug', `Starting ${this.shardCount} Shards in ${this.clusterCount} Clusters!`);\r\n\r\n\t\t\tif (this.shardCount < this.clusterCount) {\r\n\t\t\t\tthis.clusterCount = this.shardCount;\r\n\t\t\t}\r\n\r\n\t\t\tconst shardArray = [...Array(this.shardCount).keys()];\r\n\t\t\tconst shardTuple = Util.chunk(shardArray, this.clusterCount);\r\n\t\t\tconst failed: Cluster[] = [];\r\n\r\n\t\t\tfor (let index = 0; index < this.clusterCount; index++) {\r\n\t\t\t\tconst shards = shardTuple.shift()!;\r\n\r\n\t\t\t\tconst cluster = new Cluster({ id: index, shards, manager: this });\r\n\r\n\t\t\t\tthis.clusters.set(index, cluster);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait cluster.spawn();\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthis.emit('debug', `Cluster ${cluster.id} failed to start, enqueue and retry: ${error}`);\r\n\t\t\t\t\tthis.emit('error', new Error(`Cluster ${cluster.id} failed to start: ${error}`));\r\n\t\t\t\t\tfailed.push(cluster);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait this.retryFailed(failed);\r\n\t\t} else {\r\n\t\t\treturn Util.startCluster(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async restartAll(): Promise<void> {\r\n\t\tthis.emit('debug', 'Restarting all Clusters!');\r\n\r\n\t\tfor (const cluster of this.clusters.values()) {\r\n\t\t\tawait cluster.respawn();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async restart(clusterID: number): Promise<void> {\r\n\t\tconst cluster = this.clusters.get(clusterID);\r\n\t\tif (!cluster) throw new Error('No Cluster with that ID found.');\r\n\r\n\t\tthis.emit('debug', `Restarting Cluster ${clusterID}`);\r\n\r\n\t\tawait cluster.respawn();\r\n\t}\r\n\r\n\tpublic fetchClientValues<T>(prop: string): Promise<T[]> {\r\n\t\treturn this.ipc.broadcast<T>(`this.${prop}`);\r\n\t}\r\n\r\n\tpublic eval<T>(script: string): Promise<T> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\ttry {\r\n\t\t\t\t// tslint:disable-next-line:no-eval\r\n\t\t\t\treturn resolve(eval(script));\r\n\t\t\t} catch (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic on(event: 'debug', listener: (message: string) => void): this;\r\n\tpublic on(event: 'message', listener: (message: any) => void): this;\r\n\tpublic on(event: 'ready' | 'spawn', listener: (cluster: Cluster) => void): this;\r\n\tpublic on(event: 'shardReady' | 'shardReconnect', listener: (shardID: number) => void): this;\r\n\tpublic on(event: 'shardResumed', listener: (replayed: number, shardID: number) => void): this;\r\n\tpublic on(event: 'shardDisconnect', listener: (closeEvent: CloseEvent, shardID: number) => void): this;\r\n\tpublic on(event: any, listener: (...args: any[]) => void): this {\r\n\t\treturn super.on(event, listener);\r\n\t}\r\n\r\n\tpublic once(event: 'debug', listener: (message: string) => void): this;\r\n\tpublic once(event: 'message', listener: (message: any) => void): this;\r\n\tpublic once(event: 'ready' | 'spawn', listener: (cluster: Cluster) => void): this;\r\n\tpublic once(event: 'shardReady' | 'shardReconnect', listener: (shardID: number) => void): this;\r\n\tpublic once(event: 'shardResumed', listener: (replayed: number, shardID: number) => void): this;\r\n\tpublic once(event: 'shardDisconnect', listener: (closeEvent: CloseEvent, shardID: number) => void): this;\r\n\tpublic once(event: any, listener: (...args: any[]) => void): this {\r\n\t\treturn super.once(event, listener);\r\n\t}\r\n\r\n\tprivate async retryFailed(clusters: Cluster[]): Promise<void> {\r\n\t\tconst failed: Cluster[] = [];\r\n\r\n\t\tfor (const cluster of clusters) {\r\n\t\t\ttry {\r\n\t\t\t\tawait cluster.respawn();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tfailed.push(cluster);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (failed.length) return this.retryFailed(failed);\r\n\t}\r\n\r\n\tprivate async _fetchSessionEndpoint(): Promise<SessionObject> {\r\n\t\tif (!this.token) throw new Error('No token was provided!');\r\n\t\tconst res = await fetch(`${http.api}/v${http.version}/gateway/bot`, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: { Authorization: `Bot ${this.token.replace(/^Bot\\s*/i, '')}` },\r\n\t\t});\r\n\t\tif (res.ok) return res.json();\r\n\t\tthrow res;\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}