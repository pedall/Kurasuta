{"version":3,"sources":["../src/IPC/MasterIPC.ts"],"names":[],"mappings":"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","file":"MasterIPC.js","sourcesContent":["import { EventEmitter } from 'events';\r\nimport { Node, NodeMessage } from 'veza';\r\nimport { Util } from 'discord.js';\r\nimport { ShardingManager } from '..';\r\nimport { isMaster } from 'cluster';\r\nimport { IPCEvents } from '../Util/Constants';\r\n\r\nexport class MasterIPC extends EventEmitter {\r\n\t[key: string]: any;\r\n\tpublic node: Node;\r\n\r\n\tconstructor(public manager: ShardingManager) {\r\n\t\tsuper();\r\n\t\tthis.node = new Node('Master')\r\n\t\t\t.on('client.identify', client => this.emit('debug', `Client Connected: ${client.name}`))\r\n\t\t\t.on('client.disconnect', client => this.emit('debug', `Client Disconnected: ${client.name}`))\r\n\t\t\t.on('client.destroy', client => this.emit('debug', `Client Destroyed: ${client.name}`))\r\n\t\t\t.on('error', error => this.emit('error', error))\r\n\t\t\t.on('message', this._incommingMessage.bind(this));\r\n\t\tif (isMaster) this.node.serve(manager.ipcSocket);\r\n\t}\r\n\r\n\tpublic async broadcast<T>(code: string): Promise<T[]> {\r\n\t\tconst data = await this.node.broadcast({ op: IPCEvents.EVAL, d: code });\r\n\t\tlet errored = data.filter(res => !res.success);\r\n\t\tif (errored.length) {\r\n\t\t\terrored = errored.map(msg => msg.d);\r\n\t\t\tconst error = errored[0];\r\n\t\t\tthrow Util.makeError(error);\r\n\t\t}\r\n\t\treturn data.map(res => res.d);\r\n\t}\r\n\r\n\tprivate _incommingMessage(message: NodeMessage) {\r\n\t\tconst { op }: { op: number } = message.data;\r\n\t\tthis[`_${IPCEvents[op].toLowerCase()}`](message);\r\n\t}\r\n\r\n\tprivate _message(message: NodeMessage) {\r\n\t\tconst { d } = message.data;\r\n\t\tthis.manager.emit('message', d);\r\n\t}\r\n\r\n\r\n\t// new method to run custom ipcPieces\r\n\tprivate async _request(message: NodeMessage) {\r\n\t\tconst { d, route } = message.data;\r\n\t\ttry {\r\n\t\t\tlet data = await this.node.broadcast({ op: IPCEvents.REQUEST, d, route });\r\n\t\t\tlet errored = data.filter(res => !res.success);\r\n\t\t\t// TODO: maybe add some more data what shard could not fulfill the request\r\n\t\t\tdata = data.map(res => res.d);\r\n\t\t\tmessage.reply({ success: true, d: data, route });\r\n\t\t} catch (error) {\r\n\t\t\tmessage.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack }, route });\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate async _broadcast(message: NodeMessage) {\r\n\t\tconst { d } = message.data;\r\n\t\ttry {\r\n\t\t\tconst data = await this.broadcast(d);\r\n\t\t\tmessage.reply({ success: true, d: data });\r\n\t\t} catch (error) {\r\n\t\t\tmessage.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack } });\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _ready(message: NodeMessage) {\r\n\t\tconst { d: id } = message.data;\r\n\t\tconst cluster = this.manager.clusters.get(id);\r\n\t\tcluster!.emit('ready');\r\n\t\tthis.manager.emit('debug', `Cluster ${id} became ready`);\r\n\t\tthis.manager.emit('ready', cluster);\r\n\t}\r\n\r\n\tprivate _shardready(message: NodeMessage) {\r\n\t\tconst { d: { shardID } } = message.data;\r\n\t\tthis.manager.emit('debug', `Shard ${shardID} became ready`);\r\n\t\tthis.manager.emit('shardReady', shardID);\r\n\t}\r\n\r\n\tprivate _shardreconnect(message: NodeMessage) {\r\n\t\tconst { d: { shardID } } = message.data;\r\n\t\tthis.manager.emit('debug', `Shard ${shardID} tries to reconnect`);\r\n\t\tthis.manager.emit('shardReconnect', shardID);\r\n\t}\r\n\r\n\tprivate _shardresumed(message: NodeMessage) {\r\n\t\tconst { d: { shardID, replayed } } = message.data;\r\n\t\tthis.manager.emit('debug', `Shard ${shardID} resumed connection`);\r\n\t\tthis.manager.emit('shardResumed', replayed, shardID);\r\n\t}\r\n\r\n\tprivate _sharddisconnect(message: NodeMessage) {\r\n\t\tconst { d: { shardID, closeEvent } } = message.data;\r\n\t\tthis.manager.emit('debug', `Shard ${shardID} disconnected!`);\r\n\t\tthis.manager.emit('shardDisconnect', closeEvent, shardID);\r\n\t}\r\n\r\n\tprivate _restart(message: NodeMessage) {\r\n\t\tconst { d: clusterID } = message.data;\r\n\t\treturn this.manager.restart(clusterID)\r\n\t\t\t.then(() => message.reply({ success: true }))\r\n\t\t\t.catch(error => message.reply({ success: false, data: { name: error.name, message: error.message, stack: error.stack } }));\r\n\t}\r\n\r\n\tprivate async _mastereval(message: NodeMessage) {\r\n\t\tconst { d } = message.data;\r\n\t\ttry {\r\n\t\t\tconst result = await this.manager.eval(d);\r\n\t\t\treturn message.reply({ success: true, d: result });\r\n\t\t} catch (error) {\r\n\t\t\treturn message.reply({ success: false, d: { name: error.name, message: error.message, stack: error.stack } });\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _restartall() {\r\n\t\tthis.manager.restartAll();\r\n\t}\r\n\r\n\tprivate async _fetchuser(message: NodeMessage) {\r\n\t\treturn this._fetch(message, 'const user = this.users.get(\\'{id}\\'); user ? user.toJSON() : user;');\r\n\t}\r\n\r\n\tprivate async _fetchguild(message: NodeMessage) {\r\n\t\treturn this._fetch(message, 'const guild = this.guilds.get(\\'{id}\\'); guild ? guild.toJSON() : guild;');\r\n\t}\r\n\r\n\tprivate _fetchchannel(message: NodeMessage) {\r\n\t\treturn this._fetch(message, 'const channel = this.channels.get(\\'{id}\\'); channel ? channel.toJSON() : channel;');\r\n\t}\r\n\r\n\tprivate async _fetch(message: NodeMessage, code: string) {\r\n\t\tconst { d: id } = message.data;\r\n\t\tconst result = await this.broadcast<any>(code.replace('{id}', id));\r\n\t\tconst realResult = result.filter(r => r);\r\n\t\tif (realResult.length) {\r\n\t\t\treturn message.reply({ success: true, d: realResult[0] });\r\n\t\t}\r\n\t\treturn message.reply({ success: false });\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}