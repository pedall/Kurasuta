{"version":3,"sources":["../src/Util/Util.ts"],"names":[],"mappings":"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","file":"Util.js","sourcesContent":["// Copyright (c) 2017-2018 dirigeants. All rights reserved. MIT license.\r\n\r\nimport { Constructable } from 'discord.js';\r\nimport { promisify } from 'util';\r\nimport { ShardingManager, BaseCluster } from '..';\r\n\r\nexport interface AnyObj {\r\n\t[key: string]: any;\r\n}\r\n\r\nexport const PRIMITIVE_TYPES = ['string', 'bigint', 'number', 'boolean'];\r\n\r\nexport function chunk<T>(entries: T[], chunkSize: number) {\r\n\tconst result = [];\r\n\tconst amount = Math.floor(entries.length / chunkSize);\r\n\tconst mod = entries.length % chunkSize;\r\n\r\n\tfor (let i = 0; i < chunkSize; i++) {\r\n\t\tresult[i] = entries.splice(0, i < mod ? amount + 1 : amount);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function deepClone(source: any): any {\r\n\t// Check if it's a primitive (with exception of function and null, which is typeof object)\r\n\tif (source === null || isPrimitive(source)) return source;\r\n\tif (Array.isArray(source)) {\r\n\t\tconst output = [];\r\n\t\tfor (const value of source) output.push(deepClone(value));\r\n\t\treturn output;\r\n\t}\r\n\tif (isObject(source)) {\r\n\t\tconst output: AnyObj = {};\r\n\t\tfor (const [key, value] of Object.entries(source)) output[key] = deepClone(value);\r\n\t\treturn output;\r\n\t}\r\n\tif (source instanceof Map) {\r\n\t\tconst output = new (source.constructor() as Constructable<Map<any, any>>)();\r\n\t\tfor (const [key, value] of source.entries()) output.set(key, deepClone(value));\r\n\t\treturn output;\r\n\t}\r\n\tif (source instanceof Set) {\r\n\t\tconst output = new (source.constructor() as Constructable<Set<any>>)();\r\n\t\tfor (const value of source.values()) output.add(deepClone(value));\r\n\t\treturn output;\r\n\t}\r\n\treturn source;\r\n}\r\n\r\nexport function isPrimitive(value: any) {\r\n\treturn PRIMITIVE_TYPES.includes(typeof value);\r\n}\r\n\r\nexport function mergeDefault<T>(def: AnyObj, given: AnyObj): T {\r\n\tif (!given) return deepClone(def);\r\n\tfor (const key in def) {\r\n\t\tif (typeof given[key] === 'undefined') given[key] = deepClone(def[key]);\r\n\t\telse if (isObject(given[key])) given[key] = mergeDefault(def[key], given[key]);\r\n\t}\r\n\r\n\treturn given as any;\r\n}\r\n\r\nexport function isObject(input: any) {\r\n\treturn input && input.constructor === Object;\r\n}\r\n\r\nexport function sleep(duration: number) {\r\n\treturn promisify(setTimeout)(duration);\r\n}\r\n\r\nexport function calcShards(shards: number, guildsPerShard: number): number {\r\n\treturn Math.ceil(shards * (1000 / guildsPerShard));\r\n}\r\n\r\nexport async function startCluster(manager: ShardingManager) {\r\n\tconst ClusterClassRequire = await import(manager.path);\r\n\tconst ClusterClass = ClusterClassRequire.default ? ClusterClassRequire.default : ClusterClassRequire;\r\n\tconst cluster: BaseCluster = new ClusterClass(manager);\r\n\treturn cluster.init();\r\n}\r\n"],"sourceRoot":"../../src"}