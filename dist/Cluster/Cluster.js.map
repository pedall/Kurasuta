{"version":3,"sources":["../src/Cluster/Cluster.ts"],"names":[],"mappings":"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","file":"Cluster.js","sourcesContent":["import { Worker, fork } from 'cluster';\r\nimport { ShardingManager, BaseCluster } from '..';\r\nimport { IPCEvents } from '../Util/Constants';\r\nimport { IPCResult } from '../Sharding/ShardClientUtil';\r\nimport { Util as DjsUtil } from 'discord.js';\r\nimport * as Util from '../Util/Util';\r\nimport { EventEmitter } from 'events';\r\n\r\nexport interface ClusterOptions {\r\n\tid: number;\r\n\tshards: number[];\r\n\tmanager: ShardingManager;\r\n}\r\n\r\nexport class Cluster extends EventEmitter {\r\n\tpublic ready = false;\r\n\tpublic id: number;\r\n\tpublic shards: number[];\r\n\tpublic worker?: Worker;\r\n\tpublic manager: ShardingManager;\r\n\r\n\tprivate _exitListenerFunction: (...args: any[]) => void;\r\n\r\n\tconstructor(options: ClusterOptions) {\r\n\t\tsuper();\r\n\t\tthis.id = options.id;\r\n\t\tthis.shards = options.shards;\r\n\t\tthis.manager = options.manager;\r\n\t\tthis._exitListenerFunction = this._exitListener.bind(this);\r\n\r\n\t\tthis.once('ready', () => { this.ready = true; });\r\n\t}\r\n\r\n\tpublic async eval(script: string | Function) {\r\n\t\tscript = typeof script === 'function' ? `(${script})(this)` : script;\r\n\t\tconst { success, d } = await this.manager.ipc.node.sendTo<IPCResult>(`Cluster ${this.id}`, { op: IPCEvents.EVAL, d: script });\r\n\t\tif (!success) throw DjsUtil.makeError(d);\r\n\t\treturn d;\r\n\t}\r\n\r\n\tpublic async fetchClientValue(prop: string) {\r\n\t\tconst { success, d } = await this.manager.ipc.node.sendTo<IPCResult>(`Cluster ${this.id}`, { op: IPCEvents.EVAL, d: `this.${prop}` });\r\n\t\tif (!success) throw DjsUtil.makeError(d);\r\n\t\treturn d;\r\n\t}\r\n\r\n\tpublic kill() {\r\n\t\tif (this.worker) {\r\n\t\t\tthis.manager.emit('debug', `Killing Cluster ${this.id}`);\r\n\t\t\tthis.worker.removeListener('exit', this._exitListenerFunction);\r\n\t\t\tthis.worker.kill();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async respawn(delay = 500) {\r\n\t\tthis.kill();\r\n\t\tif (delay) await DjsUtil.delayFor(delay);\r\n\t\tawait this.spawn();\r\n\t}\r\n\r\n\tpublic send(data: object) {\r\n\t\treturn this.manager.ipc.node.sendTo(`Cluster ${this.id}`, data);\r\n\t}\r\n\r\n\tpublic async spawn() {\r\n\t\tthis.worker = fork({ CLUSTER_SHARDS: this.shards.join(','), CLUSTER_ID: this.id, CLUSTER_SHARD_COUNT: this.manager.shardCount, CLUSTER_CLUSTER_COUNT: this.manager.clusterCount });\r\n\r\n\t\tthis.worker.once('exit', this._exitListenerFunction);\r\n\r\n\t\tthis.manager.emit('debug', `Worker spawned with id ${this.worker.id}`);\r\n\r\n\t\tthis.manager.emit('spawn', this);\r\n\r\n\t\tawait this._waitReady(this.shards.length);\r\n\t\tawait Util.sleep(5000);\r\n\t}\r\n\r\n\tprivate _exitListener(code: number, signal: string) {\r\n\t\tthis.ready = false;\r\n\t\tthis.worker = undefined;\r\n\r\n\t\tif (this.manager.respawn) this.respawn();\r\n\r\n\t\tthis.manager.emit('debug', `Worker exited with code ${code} and signal ${signal}${this.manager.respawn ? ', restarting...' : ''}`);\r\n\t}\r\n\r\n\tprivate _waitReady(shardCount: number): Promise<void> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.once('ready', resolve);\r\n\t\t\tsetTimeout(() => reject(new Error(`Cluster ${this.id} took too long to get ready`)), (this.manager.timeout * shardCount) * (this.manager.guildsPerShard / 1000));\r\n\t\t});\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}